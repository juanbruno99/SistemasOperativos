#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <fstream>
#include <time.h>
#include <signal.h>
#include <fcntl.h>
#include <list>
#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <semaphore.h>
#include <sys/shm.h>
#include <sys/ipc.h>

#define TAMBUF 1024
#define MAXQ 10
#define CANT_VALORES 50

//Variables Externas
bool acepto_conexiones = true;
int listen_socket = 0;
extern 	pthread_t hiloEscucha;
pthread_mutex_t mutex_acepto_conexiones = PTHREAD_MUTEX_INITIALIZER;

//Prototipos de funciones
void* aceptarConexiones(void * puerto);
void inicializarMatrizPartida(int matriz[10][10], unsigned short int filas, unsigned short int columnas);
void printMatriz(int matriz[10][10], int filas, int columnas);
void desordenar_matriz(int matriz[10][10], size_t filas, size_t columnas);

//Funciones Implementacion

//Hilo que se encarga de Aceptar Conexiones
void* aceptarConexiones(void * puerto){

	char *puertoEscucha = (char*) puerto;
	printf("\n Puerto: %s \n", puertoEscucha);

	//Creamos el Socket de Escucha
	int comm_socket = 0;
	unsigned short int listen_port = htons(atoi(puertoEscucha));
	unsigned long int listen_ip_address = 0;
	struct sockaddr_in listen_address, con_address;
	socklen_t con_addr_len;
	char buffer[TAMBUF];
	int optval = 1 , i = 0;

	listen_socket = socket(AF_INET,SOCK_STREAM,0);

	if(listen_socket < 0){
		fprintf(stderr , "Error al crear el Socket de Escucha.\n");
		exit(0);
	}

	setsockopt(listen_socket , SOL_SOCKET , SO_REUSEADDR , &optval, sizeof(optval));

	//Asigno dirección y configuracion.puerto_escucha
	bzero(&listen_address , sizeof(listen_address));
	listen_address.sin_family = AF_INET;
	listen_address.sin_port = listen_port;
	listen_ip_address = htonl(INADDR_ANY);
	printf("\nIP de escucha server:%ld\n", listen_ip_address);
	listen_address.sin_addr.s_addr = listen_ip_address;

	bzero(&(listen_address.sin_zero),8);

      	if((bind(listen_socket,(struct sockaddr *)&listen_address,sizeof(struct sockaddr)))<0){
		fprintf(stderr , "Error al asignar la Dirección IP.\n");
		exit(0);
    	}

	//Comenzamos a escuchar conexiones
	if( (listen(listen_socket,MAXQ)) < 0 ){
		fprintf(stderr , "Error al escuchar conexiones.\n");
		exit(0);
	}

	bzero(&con_address,sizeof(con_address));
	con_addr_len = sizeof(struct sockaddr_in);

	//Aceptamos conexiones
	while( 1 ){
		comm_socket = accept(listen_socket,(struct sockaddr *)&con_address, &con_addr_len);

		pthread_mutex_lock( &mutex_acepto_conexiones );

		if( acepto_conexiones ){
			//Le enviamos esto al Cliente
			strncpy( buffer , "Te has conectado al servidor" , TAMBUF);
		}
		else {
			strncpy( buffer , "No se aceptan más conexiones" , TAMBUF);
		}
		send( comm_socket , buffer, TAMBUF ,0);
		pthread_mutex_unlock( &mutex_acepto_conexiones );

	i++;

	} //fin while */
	pthread_exit(NULL);
}

void inicializarMatrizPartida(int matriz[10][10], unsigned short int filas, unsigned short int columnas) {
short int i,j, val1,val2,aux1,aux2;
int count=0;

	srand(time(NULL));
		
	for(i=0;i<10;i++) {
		for(j=0;j<10;j++) {
			matriz[i][j]=count;
			count++;	
		}
		
		if(i==4)
			count=0;
	}

	desordenar_matriz(matriz,10,10);

//	for(i=0;i<10;i++) {
//		for(j=0;j<10;j++) {
//		aux1=(rand()%(50-1));
//		aux2=(rand()%(50-1));
//		val1=matriz[aux1][aux2];
//		val2=matriz[aux2][aux1];
//		matriz[aux2][aux1]=val1;
//		matriz[aux1][aux2]=val2;
//		}
//	}
}

void printMatriz(int matriz[10][10], int filas, int columnas) {
int i, j;

	for(i=0;i<10;i++) {
			for(j=0;j<10;j++) {
			printf("  %d", matriz[i][j]);		
			}
	printf("\n");
	}	
	
}

void desordenar_matriz(int matriz[10][10], size_t filas, size_t columnas) {
    if (filas > 1 && columnas > 1)
	{
        size_t i,j;
        for (i = 0; i < filas - 1; i++)
        {
			for(j = 0; j < columnas -1; j++){
			  size_t a = i + rand() / (RAND_MAX / (filas - i) + 1);
			  size_t b = j + rand() / (RAND_MAX / (columnas - j) + 1);
			  int t = matriz[a][b];
			  matriz[a][b]= matriz[i][j];
			  matriz[i][j] = t;
			}
        }
    }
}
